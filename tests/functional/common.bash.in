#!/bin/bash
#  This file is part of cc-oci-runtime.
#
#  Copyright (C) 2016 Intel Corporation
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

#Based on runc tests/integration/helpers.bash

COR_BINARY="${BATS_TEST_DIRNAME}/../../cc-oci-runtime"

# Make temporal tests directory
function mktemp_tests_dir(){
	mktemp -d --tmpdir="$BATS_TMPDIR" --suffix=-cor-test
}

# Test data dir.
TEST_DATA_DIR="$(readlink -e "${BATS_TEST_DIRNAME}")/data"
#Configuration files
CONFIG="${TEST_DATA_DIR}/config-minimal-cc-oci.json"
HYPERVISOR_ARGS="${BATS_TEST_DIRNAME}/../../data/hypervisor.args"

BUNDLE_DIR="@BUNDLE_TEST_PATH@"
[ -n "$BUNDLE_DIR" ] && ROOTFS_DIR="$BUNDLE_DIR/rootfs"
CONTAINERS_IMG="@CONTAINERS_IMG@"
CONTAINER_KERNEL="@CONTAINER_KERNEL@"
HYPERVISOR_PATH="@QEMU_PATH@"

# Verify components needed by Clear Containers
# If there is a missing component, the tests is skipped
function check_ccontainers() {

	local out=$($HYPERVISOR_PATH -machine help | grep -o pc-lite | tail -1)
	[ "$out" = "pc-lite" ] || \
		skip "$HYPERVISOR_PATH does not have pc-lite support"

	if [ ! -d "$BUNDLE_DIR" ]
	then
		skip "bundle directory does not exist,\
 provide a valid bundle in $BUNDLE_DIR"
	elif [ ! -d "$ROOTFS_DIR" ]
	then
		skip "$ROOTFS_DIR directory does not exist,\
 provide a rootfs"
	elif [ ! -f "$CONTAINERS_IMG" ]
	then
		skip "Clear Container image $CONTAINERS_IMG does\
 not exist, provide an image"
	elif [ ! -f "$CONTAINER_KERNEL" ]
	then
		skip "Clear Container kernel $CONTAINER_KERNEL does\
 not exist, provide a kernel"
	elif [ ! -x "$HYPERVISOR_PATH" ]
	then
		 skip "execute permission is not granted: $HYPERVISOR_PATH"
	fi

	for f in  $BUNDLE_DIR $ROOTFS_DIR $CONTAINERS_IMG $CONTAINER_KERNEL
	do
		[ -r "$f" ] || skip "cannot read file $f"
		[ -w "$f" ] || skip "write permission is not granted: $f"
	done

	#Copy hypervisor.args
	/bin/cp "$HYPERVISOR_ARGS" "${BUNDLE_DIR}/hypervisor.args"
	cd "$BATS_TEST_DIRNAME"
}

# Verify a container state
# @param <container-id>
# @param <status>  container status to check (e.g. running)
# @param <timeout> timeout to check container status
# return true if containter have the <status>, false if
#        the status is not the expected after timeout
function testcontainer() {
	local container_id="$1"
	local status="$2"
	local timeout_cmd=${3:-5}
	local i=0
	local got=0
	local cmd="$COR list --format table"
	[ "$timeout_cmd"  -eq "$timeout_cmd" ] || \
	{ log_msg "timeout is not a number"; exit 1; }
	while [ "$i" -lt "$timeout_cmd" ]
	do
		local output=$(run_cmd "$cmd")
		[[ ${output} =~ ID\ +PID\ +STATUS\ +BUNDLE\ +CREATED+ ]]
		if [[ "${output}" == *"$container_id"*[0-9]*"$status"*"$BUNDLE_DIR"* ]]
		then
			got=1
			#Wait at least one second, for vm bootime
			#Cor spawns the hypervisor but it does not mean
			#That the vm is ready to work
			#Clear containres must boot in less than one second
			sleep 1
			break
		fi
		sleep 1
		i=$((i+1))
	done
	[ "$got" -eq 1 ] || { log_msg "FAILED"; exit 1; }
	log_msg "SUCCESS"
}

# Check if test is running as root, if not
# the test will be skipped
function check_root() {
	if [[ $(id -u) -ne 0 ]]
	then
		skip "Test requires root"
	fi
}

#Modify config.json's workload to execute a <cmd>
# @param <cmd>
# @param <options> ...
function workload_cmd() {
	#Copy new, no modified config.json
	/bin/cp "$CONFIG" "${BUNDLE_DIR}/config.json"
	local cmd="\"$1\""
	local opt
	shift
	for opt in "$@"
	do
	    cmd="$cmd\, \"$opt\""
	done
	sed -i "s,\"CMD\",$cmd,g" "$BUNDLE_DIR/config.json"
}

# Execute a command and vefiy its exit code
# if exit code is not the expected
# the current tests will fail
# @param cmd command to run
# @param expected_exit_code expected exit code
# @param timeout time to wait before kill command
function run_cmd(){
	local cmd="$1"
	local expected_exit_code="${2:-0}"
	local timeout_cmd="$3"

	#Remove -e from bats enviroment
	set +e

	if [ "$timeout_cmd"  -eq "$timeout_cmd" ] 2> /dev/null
	then
		cmd="timeout $timeout_cmd $cmd"
	fi
	log_msg "Running: $cmd"
	eval "$cmd" 2>&1
	local exit_code="$?"
	log_msg "exit code: $exit_code"
	log_msg "expected exit code: $expected_exit_code"

	if [ ! "$exit_code" -eq "$expected_exit_code" ]
	then
		if [ -f "$COR_LOG_FILE" ]
		then
			log_msg "See $TEST_LOG_FILE"
			cat "$COR_LOG_FILE" >> "$TEST_LOG_FILE"
		fi
	fi
	#Restore -e from bats enviroment
	set -e
	[ "$exit_code" -eq "$expected_exit_code" ]
}

function log_msg()
{
	local msg="$*"
	echo "$msg" >&2
}

# Common setup for all the tests
function setup_common(){
	# container-specific directory
	COR_ROOT_DIR=$(mktemp_tests_dir)

	# test-specific directory used to hold global log and hypervisor
	# output files
	COR_GLOBAL_DIR=$(mktemp_tests_dir)

	COR_HYPERVISOR_LOG_DIR="$COR_GLOBAL_DIR"

	COR_LOGFILE_NAME="@PACKAGE_NAME@.log"

	if [ $(id -u) -eq 0 ]
	then
		# running as root
		COR_LOG_FILE="/run/@PACKAGE_NAME@/$COR_LOGFILE_NAME"

		# The global log needs to be recreated for each test
		# run.
		rm -f "$COR_LOG_FILE"

		mkdir -p $(dirname "$COR_LOG_FILE") || true
	else
		# non-priv user
		COR_LOG_FILE="$COR_GLOBAL_DIR/$COR_LOGFILE_NAME"
	fi

	COR_ARGS=""

	# always run in debug mode to make problem diagnosis easier
	COR_ARGS="$COR_ARGS --debug"

	# Give each container its own directory.
	# (Note that the arguments to these options must *NOT* be
	# quoted else odd bats behaviour results).
	COR_ARGS="$COR_ARGS --root $COR_ROOT_DIR"

	COR_ARGS="$COR_ARGS --global-log $COR_LOG_FILE"
	COR_ARGS="$COR_ARGS --hypervisor-log-dir $COR_HYPERVISOR_LOG_DIR"

	COR="$COR_BINARY $COR_ARGS"

	TEST_LOG_FILE="$(pwd)/${BATS_TEST_NAME// /.}.log"
	if [ -f "$TEST_LOG_FILE" ]
	then
		rm "$TEST_LOG_FILE"
	fi
}

# Cleanup anything generated by this script
function cleanup_common(){
	if [ "$BATS_ERROR_STATUS" -eq 1 ]
	then
		echo >&2 "Test logs: $COR_ROOT_DIR"
		echo >&2 "Global log file: $COR_LOG_FILE"
		echo >&2 "Hypervisor log dir: $COR_HYPERVISOR_LOG_DIR"
		echo >&2 "bats status: $status"
		echo >&2 "bats output (lines array contains ${#lines[*]} lines):"
		local i=0
		local line

		for line in ${lines[@]}
		do
			echo >&2 "lines[$i]: '$line'"
			i=$((i+1))
		done

		echo >&2 "BUNDLE_DIR: $BUNDLE_DIR"
		echo >&2 "ROOTFS_DIR: $ROOTFS_DIR"

		# XXX: retain logs if tests fail
		return
	fi

	rm -rf "$COR_ROOT_DIR" "$COR_GLOBAL_DIR"
}

if [ ! -e "$COR_BINARY" ]
then
	cat <<EOT >&2
ERROR: you need run 'make' before running the functional tests.
EOT
	exit 1
fi
